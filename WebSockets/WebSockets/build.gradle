apply plugin: 'war'
apply plugin: 'eclipse-wtp'
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'


java {
    sourceCompatibility = 21
    targetCompatibility = 21
}

repositories {
    mavenCentral()
}

/*
gretty {
  servletContainer = 'jetty9'
}
*/

wrapper {
  	gradleVersion = '1.10'
}

// Fills out all dependencies which are necessary to start the embedded jetty into our war file
configurations {
	embeddedJetty
}

configurations.all {
	resolutionStrategy {
	  eachDependency { DependencyResolveDetails details ->
		  println details.requested.name + "-" + details.requested.version
		  println details.target.name + "-" + details.target.version
	  }
 
	  // cache dynamic versions for 10 minutes
	  cacheDynamicVersionsFor 10*60, 'seconds'
	  // don't cache changing modules at all
	  cacheChangingModulesFor 0, 'seconds'
	}
  }

dependencies {
    // Jetty 12
    embeddedJetty 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.10'
    embeddedJetty 'org.eclipse.jetty.ee10:jetty-ee10-webapp:12.0.10'
    embeddedJetty 'org.eclipse.jetty.ee10:jetty-ee10-plus:12.0.10'
    embeddedJetty 'org.eclipse.jetty.ee10:jetty-ee10-annotations:12.0.10'
    embeddedJetty 'org.eclipse.jetty.ee10:jetty-ee10-apache-jsp:12.0.10'
    embeddedJetty 'org.eclipse.jetty.ee10.websocket:jetty-ee10-websocket-jakarta-server:12.0.10'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.1.0'

    // JSON library
    implementation 'org.glassfish:jakarta.json:2.0.1'
}


task mytask {
	doLast {
		println configurations.embeddedJetty.resolutionStrategy.forcedModules
		/*
		configurations.collect {
			println '--' + it
			it.collect(){
				println it
				println it.name
			}
		}
		*/
	}
}

war.archiveBaseName = 'WebSockets'
war {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// unzip and add all jetty dependencies into the root of our war file
	from {configurations.embeddedJetty.collect {
			project.zipTree(it)
		}
	}
	// remove signature and unnecessary files
	exclude "META-INF/*.SF", "META-INF/*.RSA", "about.html", "about_files/**", "readme.txt", "plugin.properties", "jetty-dir.css"

	// include only the classes which will be used to start Embedded Jetty
	from "$buildDir/classes/main"
	exclude "com/myapp/"
	
	// tells the class to run when the generate war be executed using 'java -jar'
	manifest { attributes 'Main-Class': 'com.embedded.JettyStarter' }
}

// Once you will need some basic api (e.i. servlet api) for compilation, add embeddedJetty dependencies for compilation
sourceSets.main.compileClasspath += configurations.embeddedJetty

// the same for eclipse classpath, so you can use it to edit your java files
eclipse {
	classpath {
		plusConfigurations += configurations.embeddedJetty
	}
}
